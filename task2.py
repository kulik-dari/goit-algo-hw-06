"""
–ó–∞–≤–¥–∞–Ω–Ω—è 2: –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ DFS —Ç–∞ BFS –¥–ª—è –ø–æ—à—É–∫—É —à–ª—è—Ö—ñ–≤

–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –ø–æ—à—É–∫—É –≤ –≥–ª–∏–±–∏–Ω—É (DFS) —Ç–∞ –ø–æ—à—É–∫—É –≤ —à–∏—Ä–∏–Ω—É (BFS)
–Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ–π –º–µ—Ä–µ–∂—ñ –º—ñ—Å—Ç–∞, —Å—Ç–≤–æ—Ä–µ–Ω—ñ–π –≤ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ.
"""

import networkx as nx
import matplotlib.pyplot as plt
from collections import deque, defaultdict
import time

def load_graph():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≥—Ä–∞—Ñ –∑ —Ñ–∞–π–ª—É –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    
    Returns:
        nx.Graph: –ì—Ä–∞—Ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
    """
    try:
        G = nx.read_gml("city_transport_network.gml")
        print("‚úÖ –ì—Ä–∞—Ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É 'city_transport_network.gml'")
        return G
    except FileNotFoundError:
        print("‚ö†Ô∏è  –§–∞–π–ª –≥—Ä–∞—Ñ–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π...")
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–µ—Ä—à–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        from task1 import create_city_transport_network
        G = create_city_transport_network()
        nx.write_gml(G, "city_transport_network.gml")
        return G

def dfs_paths(graph, start, end, path=None):
    """
    –ü–æ—à—É–∫ —É—Å—ñ—Ö —à–ª—è—Ö—ñ–≤ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–æ –∫—ñ–Ω—Ü–µ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é DFS.
    
    Args:
        graph (nx.Graph): –ì—Ä–∞—Ñ –¥–ª—è –ø–æ—à—É–∫—É
        start (str): –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        end (str): –ö—ñ–Ω—Ü–µ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        path (list): –ü–æ—Ç–æ—á–Ω–∏–π —à–ª—è—Ö (–¥–ª—è —Ä–µ–∫—É—Ä—Å—ñ—ó)
        
    Yields:
        list: –ó–Ω–∞–π–¥–µ–Ω—ñ —à–ª—è—Ö–∏
    """
    if path is None:
        path = []
    
    path = path + [start]
    
    if start == end:
        yield path
    else:
        for neighbor in graph.neighbors(start):
            if neighbor not in path:  # –£–Ω–∏–∫–∞—î–º–æ —Ü–∏–∫–ª—ñ–≤
                yield from dfs_paths(graph, neighbor, end, path)

def dfs_single_path(graph, start, end):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–¥–∏–Ω —à–ª—è—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é DFS –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º.
    
    Args:
        graph (nx.Graph): –ì—Ä–∞—Ñ –¥–ª—è –ø–æ—à—É–∫—É
        start (str): –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        end (str): –ö—ñ–Ω—Ü–µ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        
    Returns:
        tuple: (—à–ª—è—Ö, –ø–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    visited = set()
    path = []
    visit_order = []
    
    def dfs_recursive(node, target, current_path):
        visited.add(node)
        visit_order.append(node)
        current_path.append(node)
        
        if node == target:
            return True
        
        # –°–æ—Ä—Ç—É—î–º–æ —Å—É—Å—ñ–¥—ñ–≤ –¥–ª—è –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        neighbors = sorted(graph.neighbors(node))
        for neighbor in neighbors:
            if neighbor not in visited:
                if dfs_recursive(neighbor, target, current_path):
                    return True
        
        current_path.pop()  # Backtrack
        return False
    
    start_time = time.time()
    found = dfs_recursive(start, end, path)
    end_time = time.time()
    
    stats = {
        'found': found,
        'path_length': len(path) if found else 0,
        'nodes_visited': len(visit_order),
        'execution_time': end_time - start_time,
        'algorithm': 'DFS'
    }
    
    return path if found else None, visit_order, stats

def bfs_single_path(graph, start, end):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é BFS –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º.
    
    Args:
        graph (nx.Graph): –ì—Ä–∞—Ñ –¥–ª—è –ø–æ—à—É–∫—É
        start (str): –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        end (str): –ö—ñ–Ω—Ü–µ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        
    Returns:
        tuple: (—à–ª—è—Ö, –ø–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    if start == end:
        return [start], [start], {'found': True, 'path_length': 1, 'nodes_visited': 1, 'execution_time': 0, 'algorithm': 'BFS'}
    
    visited = set([start])
    queue = deque([(start, [start])])
    visit_order = [start]
    
    start_time = time.time()
    
    while queue:
        current, path = queue.popleft()
        
        # –°–æ—Ä—Ç—É—î–º–æ —Å—É—Å—ñ–¥—ñ–≤ –¥–ª—è –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        neighbors = sorted(graph.neighbors(current))
        for neighbor in neighbors:
            if neighbor not in visited:
                visited.add(neighbor)
                visit_order.append(neighbor)
                new_path = path + [neighbor]
                
                if neighbor == end:
                    end_time = time.time()
                    stats = {
                        'found': True,
                        'path_length': len(new_path),
                        'nodes_visited': len(visit_order),
                        'execution_time': end_time - start_time,
                        'algorithm': 'BFS'
                    }
                    return new_path, visit_order, stats
                
                queue.append((neighbor, new_path))
    
    end_time = time.time()
    stats = {
        'found': False,
        'path_length': 0,
        'nodes_visited': len(visit_order),
        'execution_time': end_time - start_time,
        'algorithm': 'BFS'
    }
    
    return None, visit_order, stats

def visualize_path_comparison(graph, start, end, dfs_path, bfs_path, dfs_visit_order, bfs_visit_order):
    """
    –í—ñ–∑—É–∞–ª—ñ–∑—É—î –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —à–ª—è—Ö—ñ–≤ DFS —Ç–∞ BFS.
    
    Args:
        graph (nx.Graph): –ì—Ä–∞—Ñ
        start (str): –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        end (str): –ö—ñ–Ω—Ü–µ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        dfs_path (list): –®–ª—è—Ö, –∑–Ω–∞–π–¥–µ–Ω–∏–π DFS
        bfs_path (list): –®–ª—è—Ö, –∑–Ω–∞–π–¥–µ–Ω–∏–π BFS
        dfs_visit_order (list): –ü–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è DFS
        bfs_visit_order (list): –ü–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è BFS
    """
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))
    
    pos = nx.spring_layout(graph, k=3, iterations=50, seed=42)
    
    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ–∞ –∑ –≤–∏–¥—ñ–ª–µ–Ω–∏–º —à–ª—è—Ö–æ–º
    def draw_graph_with_path(ax, path, visit_order, title, algorithm):
        # –ë–∞–∑–æ–≤—ñ –∫–æ–ª—å–æ—Ä–∏ –≤–µ—Ä—à–∏–Ω
        node_colors = []
        for node in graph.nodes():
            if node == start:
                node_colors.append('#FF4444')  # –ß–µ—Ä–≤–æ–Ω–∏–π –¥–ª—è –ø–æ—á–∞—Ç–∫—É
            elif node == end:
                node_colors.append('#44FF44')  # –ó–µ–ª–µ–Ω–∏–π –¥–ª—è –∫—ñ–Ω—Ü—è
            elif path and node in path:
                node_colors.append('#4444FF')  # –°–∏–Ω—ñ–π –¥–ª—è —à–ª—è—Ö—É
            elif node in visit_order:
                node_colors.append('#FFAA44')  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π –¥–ª—è –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö
            else:
                node_colors.append('#CCCCCC')  # –°—ñ—Ä–∏–π –¥–ª—è –Ω–µ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö
        
        # –ú–∞–ª—é—î–º–æ –≤—Å—ñ —Ä–µ–±—Ä–∞ —Å—ñ—Ä–∏–º –∫–æ–ª—å–æ—Ä–æ–º
        nx.draw_networkx_edges(graph, pos, ax=ax, edge_color='lightgray', width=1, alpha=0.5)
        
        # –í–∏–¥—ñ–ª—è—î–º–æ —Ä–µ–±—Ä–∞ —à–ª—è—Ö—É
        if path and len(path) > 1:
            path_edges = [(path[i], path[i+1]) for i in range(len(path)-1)]
            nx.draw_networkx_edges(graph, pos, edgelist=path_edges, ax=ax,
                                 edge_color='red', width=3, alpha=0.8)
        
        # –ú–∞–ª—é—î–º–æ –≤–µ—Ä—à–∏–Ω–∏
        nx.draw_networkx_nodes(graph, pos, ax=ax,
                             node_color=node_colors,
                             node_size=500,
                             alpha=0.8,
                             edgecolors='black',
                             linewidths=1)
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∏
        nx.draw_networkx_labels(graph, pos, ax=ax,
                              font_size=6,
                              font_weight='bold')
        
        ax.set_title(f'{title}\n{algorithm}', fontsize=14, fontweight='bold')
        ax.axis('off')
        
        # –î–æ–¥–∞—î–º–æ –ª–µ–≥–µ–Ω–¥—É
        legend_elements = [
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='#FF4444', 
                      markersize=10, label='–ü–æ—á–∞—Ç–æ–∫'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='#44FF44', 
                      markersize=10, label='–ö—ñ–Ω–µ—Ü—å'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='#4444FF', 
                      markersize=10, label='–®–ª—è—Ö'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='#FFAA44', 
                      markersize=10, label='–í—ñ–¥–≤—ñ–¥–∞–Ω–æ'),
            plt.Line2D([0], [0], color='red', linewidth=3, label='–ó–Ω–∞–π–¥–µ–Ω–∏–π —à–ª—è—Ö')
        ]
        ax.legend(handles=legend_elements, loc='upper left', bbox_to_anchor=(0, 1))
    
    # –ú–∞–ª—é—î–º–æ DFS
    draw_graph_with_path(ax1, dfs_path, dfs_visit_order, 
                        f'–ü–æ—à—É–∫ –≤ –≥–ª–∏–±–∏–Ω—É (DFS)\n{start} ‚Üí {end}', 'DFS')
    
    # –ú–∞–ª—é—î–º–æ BFS
    draw_graph_with_path(ax2, bfs_path, bfs_visit_order,
                        f'–ü–æ—à—É–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS)\n{start} ‚Üí {end}', 'BFS')
    
    plt.tight_layout()
    plt.show()

def analyze_algorithms_comparison(dfs_stats, bfs_stats, dfs_path, bfs_path):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ DFS —Ç–∞ BFS.
    
    Args:
        dfs_stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DFS
        bfs_stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BFS
        dfs_path (list): –®–ª—è—Ö DFS
        bfs_path (list): –®–ª—è—Ö BFS
    """
    print("\n" + "="*70)
    print("üìä –ü–û–†–Ü–í–ù–Ø–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ê–õ–ì–û–†–ò–¢–ú–Ü–í DFS –¢–ê BFS")
    print("="*70)
    
    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:")
    print(f"{'–ê–ª–≥–æ—Ä–∏—Ç–º':<10} {'–ó–Ω–∞–π–¥–µ–Ω–æ':<10} {'–î–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—É':<15} {'–í—ñ–¥–≤—ñ–¥–∞–Ω–æ –≤—É–∑–ª—ñ–≤':<15} {'–ß–∞—Å (–º—Å)':<10}")
    print("-" * 70)
    
    dfs_time_ms = dfs_stats['execution_time'] * 1000
    bfs_time_ms = bfs_stats['execution_time'] * 1000
    
    print(f"{'DFS':<10} {'–¢–∞–∫' if dfs_stats['found'] else '–ù—ñ':<10} "
          f"{dfs_stats['path_length']:<15} {dfs_stats['nodes_visited']:<15} {dfs_time_ms:.3f}")
    print(f"{'BFS':<10} {'–¢–∞–∫' if bfs_stats['found'] else '–ù—ñ':<10} "
          f"{bfs_stats['path_length']:<15} {bfs_stats['nodes_visited']:<15} {bfs_time_ms:.3f}")
    
    print(f"\nüìà –î–µ—Ç–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:")
    
    if dfs_stats['found'] and bfs_stats['found']:
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ —à–ª—è—Ö—ñ–≤
        if dfs_stats['path_length'] == bfs_stats['path_length']:
            print(f"   ‚Ä¢ –î–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—ñ–≤: –û–¥–Ω–∞–∫–æ–≤–∞ ({dfs_stats['path_length']} –≤—É–∑–ª—ñ–≤)")
        elif dfs_stats['path_length'] < bfs_stats['path_length']:
            diff = bfs_stats['path_length'] - dfs_stats['path_length']
            print(f"   ‚Ä¢ –î–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—ñ–≤: DFS –∫–æ—Ä–æ—Ç—à–∏–π –Ω–∞ {diff} –≤—É–∑–ª—ñ–≤")
        else:
            diff = dfs_stats['path_length'] - bfs_stats['path_length']
            print(f"   ‚Ä¢ –î–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—ñ–≤: BFS –∫–æ—Ä–æ—Ç—à–∏–π –Ω–∞ {diff} –≤—É–∑–ª—ñ–≤")
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤—É–∑–ª—ñ–≤
        if dfs_stats['nodes_visited'] == bfs_stats['nodes_visited']:
            print(f"   ‚Ä¢ –í—ñ–¥–≤—ñ–¥–∞–Ω–æ –≤—É–∑–ª—ñ–≤: –û–¥–Ω–∞–∫–æ–≤–æ ({dfs_stats['nodes_visited']})")
        elif dfs_stats['nodes_visited'] < bfs_stats['nodes_visited']:
            diff = bfs_stats['nodes_visited'] - dfs_stats['nodes_visited']
            print(f"   ‚Ä¢ –í—ñ–¥–≤—ñ–¥–∞–Ω–æ –≤—É–∑–ª—ñ–≤: DFS –º–µ–Ω—à–µ –Ω–∞ {diff}")
        else:
            diff = dfs_stats['nodes_visited'] - bfs_stats['nodes_visited']
            print(f"   ‚Ä¢ –í—ñ–¥–≤—ñ–¥–∞–Ω–æ –≤—É–∑–ª—ñ–≤: BFS –º–µ–Ω—à–µ –Ω–∞ {diff}")
        
        # –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ —á–∞—Å–æ–º
        if dfs_time_ms < bfs_time_ms:
            ratio = bfs_time_ms / dfs_time_ms if dfs_time_ms > 0 else float('inf')
            print(f"   ‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å: DFS —à–≤–∏–¥—à–∏–π —É {ratio:.2f} —Ä–∞–∑—ñ–≤")
        elif bfs_time_ms < dfs_time_ms:
            ratio = dfs_time_ms / bfs_time_ms if bfs_time_ms > 0 else float('inf')
            print(f"   ‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å: BFS —à–≤–∏–¥—à–∏–π —É {ratio:.2f} —Ä–∞–∑—ñ–≤")
        else:
            print(f"   ‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å: –ü—Ä–∏–±–ª–∏–∑–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞")
    
    print(f"\nüìù –ó–Ω–∞–π–¥–µ–Ω—ñ —à–ª—è—Ö–∏:")
    if dfs_path:
        print(f"   DFS: {' ‚Üí '.join(dfs_path)}")
    else:
        print(f"   DFS: –®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    if bfs_path:
        print(f"   BFS: {' ‚Üí '.join(bfs_path)}")
    else:
        print(f"   BFS: –®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

def explain_algorithm_differences():
    """
    –ü–æ—è—Å–Ω—é—î –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ –º—ñ–∂ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ DFS —Ç–∞ BFS.
    """
    print(f"\n" + "="*70)
    print("üß† –ü–û–Ø–°–ù–ï–ù–ù–Ø –í–Ü–î–ú–Ü–ù–ù–û–°–¢–ï–ô –ú–Ü–ñ –ê–õ–ì–û–†–ò–¢–ú–ê–ú–ò")
    print("="*70)
    
    print(f"""
üîç –ü–û–®–£–ö –í –ì–õ–ò–ë–ò–ù–£ (DFS - Depth-First Search):
   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
   ‚Ä¢ –î–æ—Å–ª—ñ–¥–∂—É—î –≥—Ä–∞—Ñ "–≤–≥–ª–∏–±" - –π–¥–µ —è–∫–æ–º–æ–≥–∞ –¥–∞–ª—ñ –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—Ç–µ–∫ (—Ä–µ–∫—É—Ä—Å—ñ—é –∞–±–æ —è–≤–Ω–∏–π —Å—Ç–µ–∫)
   ‚Ä¢ –ú–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –¥–æ–≤—à–∏–π —à–ª—è—Ö, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
   ‚Ä¢ –ü–æ—Ç—Ä–µ–±—É—î –º–µ–Ω—à–µ –ø–∞–º'—è—Ç—ñ
   
   –ü–µ—Ä–µ–≤–∞–≥–∏:
   ‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –∑–∞ –ø–∞–º'—è—Ç—Ç—é O(h), –¥–µ h - –≤–∏—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞
   ‚Ä¢ –ü—Ä–æ—Å—Ç–∏–π —É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
   ‚Ä¢ –î–æ–±—Ä–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø–æ—à—É–∫—É –≤—Å—ñ—Ö —Ä—ñ—à–µ–Ω—å
   
   –ù–µ–¥–æ–ª—ñ–∫–∏:
   ‚Ä¢ –ù–µ –≥–∞—Ä–∞–Ω—Ç—É—î –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö
   ‚Ä¢ –ú–æ–∂–µ "–∑–∞—Å—Ç—Ä—è–≥—Ç–∏" –≤ –≥–ª–∏–±–æ–∫–∏—Ö –≥—ñ–ª–∫–∞—Ö
   ‚Ä¢ –£ –Ω–∞–π–≥—ñ—Ä—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –º–æ–∂–µ –æ–±—ñ–π—Ç–∏ –≤–µ—Å—å –≥—Ä–∞—Ñ

üîç –ü–û–®–£–ö –í –®–ò–†–ò–ù–£ (BFS - Breadth-First Search):
   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
   ‚Ä¢ –î–æ—Å–ª—ñ–¥–∂—É—î –≥—Ä–∞—Ñ "–≤—à–∏—Ä" - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ—Ö —Å—É—Å—ñ–¥—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ
   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —á–µ—Ä–≥—É (FIFO)
   ‚Ä¢ –ó–∞–≤–∂–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö (–∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ä–µ–±–µ—Ä)
   ‚Ä¢ –ü–æ—Ç—Ä–µ–±—É—î –±—ñ–ª—å—à–µ –ø–∞–º'—è—Ç—ñ
   
   –ü–µ—Ä–µ–≤–∞–≥–∏:
   ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç—É—î –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤ –Ω–µ–∑–≤–∞–∂–µ–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ –¥–æ—Å–ª—ñ–¥–∂—É—î –≥—Ä–∞—Ñ —Ä—ñ–≤–µ–Ω—å –∑–∞ —Ä—ñ–≤–Ω–µ–º
   ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É
   
   –ù–µ–¥–æ–ª—ñ–∫–∏:
   ‚Ä¢ –ü–æ—Ç—Ä–µ–±—É—î –±—ñ–ª—å—à–µ –ø–∞–º'—è—Ç—ñ O(w), –¥–µ w - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞
   ‚Ä¢ –ú–æ–∂–µ –±—É—Ç–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–º –¥–ª—è –≥–ª–∏–±–æ–∫–∏—Ö –≥—Ä–∞—Ñ—ñ–≤
   ‚Ä¢ –î–æ—Å–ª—ñ–¥–∂—É—î –±–∞–≥–∞—Ç–æ "–Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö" –≤—É–∑–ª—ñ–≤

üéØ –ß–û–ú–£ –ê–õ–ì–û–†–ò–¢–ú–ò –û–ë–ò–†–ê–Æ–¢–¨ –†–Ü–ó–ù–Ü –®–õ–Ø–•–ò:

1. DFS —Å–ª—ñ–¥—É—î –ø–µ—Ä—à–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É —à–ª—è—Ö—É –¥–æ –∫—ñ–Ω—Ü—è, –ø–æ—Ç—ñ–º –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–¥
2. BFS –¥–æ—Å–ª—ñ–¥–∂—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –Ω–∞ –∫–æ–∂–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–∞–ª—ñ
3. –í —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ–π –º–µ—Ä–µ–∂—ñ:
   ‚Ä¢ DFS –º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –ø—Ä—è–º–∏–π, –∞–ª–µ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π –º–∞—Ä—à—Ä—É—Ç
   ‚Ä¢ BFS –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–µ—Ä–µ—Å–∞–¥–æ–∫
   ‚Ä¢ –î–ª—è –ø–∞—Å–∞–∂–∏—Ä—ñ–≤ BFS –∑–∞–∑–≤–∏—á–∞–π –∫—Ä–∞—â–∏–π (–º–µ–Ω—à–µ –ø–µ—Ä–µ—Å–∞–¥–æ–∫)
   ‚Ä¢ –î–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–≤'—è–∑–Ω–æ—Å—Ç—ñ DFS –º–æ–∂–µ –±—É—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º
    """)

def test_multiple_paths(graph):
    """
    –¢–µ—Å—Ç—É—î –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–∞—Ä–∞—Ö —Å—Ç–∞–Ω—Ü—ñ–π.
    
    Args:
        graph (nx.Graph): –ì—Ä–∞—Ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    """
    print(f"\n" + "="*70)
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–ê –†–Ü–ó–ù–ò–• –ú–ê–†–®–†–£–¢–ê–•")
    print("="*70)
    
    # –í–∏–±–∏—Ä–∞—î–º–æ —Ü—ñ–∫–∞–≤—ñ –ø–∞—Ä–∏ —Å—Ç–∞–Ω—Ü—ñ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_pairs = [
        ('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞', '–ê–µ—Ä–æ–ø–æ—Ä—Ç'),
        ('–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –≤–æ–∫–∑–∞–ª', '–†—ñ—á–∫–æ–≤–∏–π –ø–æ—Ä—Ç'),
        ('–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–ñ–∏—Ç–ª–æ–≤–∏–π –º–∞—Å–∏–≤'),
        ('–õ—ñ—Å–æ–ø–∞—Ä–∫', '–ó–∞–≤–æ–¥—Å—å–∫–∞'),
        ('–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞', '–ù–æ–≤–∞ –∑–∞–±—É–¥–æ–≤–∞')
    ]
    
    summary_results = []
    
    for start, end in test_pairs:
        if start in graph.nodes() and end in graph.nodes():
            print(f"\nüöá –ú–∞—Ä—à—Ä—É—Ç: {start} ‚Üí {end}")
            print("-" * 50)
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫
            dfs_path, dfs_visit_order, dfs_stats = dfs_single_path(graph, start, end)
            bfs_path, bfs_visit_order, bfs_stats = bfs_single_path(graph, start, end)
            
            # –ö–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç
            if dfs_stats['found'] and bfs_stats['found']:
                print(f"DFS: {len(dfs_path)} —Å—Ç–∞–Ω—Ü—ñ–π, {dfs_stats['nodes_visited']} –≤—ñ–¥–≤—ñ–¥–∞–Ω–æ")
                print(f"BFS: {len(bfs_path)} —Å—Ç–∞–Ω—Ü—ñ–π, {bfs_stats['nodes_visited']} –≤—ñ–¥–≤—ñ–¥–∞–Ω–æ")
                
                if len(dfs_path) == len(bfs_path):
                    print("‚úÖ –û–¥–Ω–∞–∫–æ–≤–∞ –¥–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—É")
                elif len(bfs_path) < len(dfs_path):
                    print(f"‚úÖ BFS –∑–Ω–∞–π—à–æ–≤ –∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –Ω–∞ {len(dfs_path) - len(bfs_path)} —Å—Ç–∞–Ω—Ü—ñ–π")
                else:
                    print(f"‚ö†Ô∏è  DFS –∑–Ω–∞–π—à–æ–≤ –∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –Ω–∞ {len(bfs_path) - len(dfs_path)} —Å—Ç–∞–Ω—Ü—ñ–π")
            
            summary_results.append({
                'route': f"{start} ‚Üí {end}",
                'dfs_length': len(dfs_path) if dfs_path else None,
                'bfs_length': len(bfs_path) if bfs_path else None,
                'dfs_visited': dfs_stats['nodes_visited'],
                'bfs_visited': bfs_stats['nodes_visited']
            })
    
    # –ü—ñ–¥—Å—É–º–æ–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
    print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print("-" * 70)
    bfs_wins = sum(1 for r in summary_results 
                   if r['bfs_length'] is not None and r['dfs_length'] is not None 
                   and r['bfs_length'] < r['dfs_length'])
    dfs_wins = sum(1 for r in summary_results 
                   if r['bfs_length'] is not None and r['dfs_length'] is not None 
                   and r['dfs_length'] < r['bfs_length'])
    ties = sum(1 for r in summary_results 
               if r['bfs_length'] is not None and r['dfs_length'] is not None 
               and r['bfs_length'] == r['dfs_length'])
    
    print(f"BFS –∑–Ω–∞–π—à–æ–≤ –∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏: {bfs_wins} —Ä–∞–∑—ñ–≤")
    print(f"DFS –∑–Ω–∞–π—à–æ–≤ –∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏: {dfs_wins} —Ä–∞–∑—ñ–≤")
    print(f"–û–¥–Ω–∞–∫–æ–≤–∞ –¥–æ–≤–∂–∏–Ω–∞: {ties} —Ä–∞–∑—ñ–≤")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è 2.
    """
    print("üîç –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ DFS —Ç–∞ BFS")
    print("="*60)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥—Ä–∞—Ñ
    G = load_graph()
    
    # –í–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞–Ω—Ü—ñ—ó –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    start_station = '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞'
    end_station = '–ê–µ—Ä–æ–ø–æ—Ä—Ç'
    
    print(f"\nüéØ –û—Å–Ω–æ–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è:")
    print(f"–ú–∞—Ä—à—Ä—É—Ç: {start_station} ‚Üí {end_station}")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ DFS
    print(f"\nüîç –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –≤ –≥–ª–∏–±–∏–Ω—É (DFS)...")
    dfs_path, dfs_visit_order, dfs_stats = dfs_single_path(G, start_station, end_station)
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ BFS
    print(f"üîç –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS)...")
    bfs_path, bfs_visit_order, bfs_stats = bfs_single_path(G, start_station, end_station)
    
    # –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print(f"\nüìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...")
    visualize_path_comparison(G, start_station, end_station, 
                            dfs_path, bfs_path, dfs_visit_order, bfs_visit_order)
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    analyze_algorithms_comparison(dfs_stats, bfs_stats, dfs_path, bfs_path)
    
    # –ü–æ—è—Å–Ω—é—î–º–æ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ
    explain_algorithm_differences()
    
    # –¢–µ—Å—Ç—É—î–º–æ –Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö
    test_multiple_paths(G)
    
    print(f"\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìã –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ DFS —Ç–∞ BFS")
    print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ –≤ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —à–ª—è—Ö–∞—Ö")
    print(f"üß† –ü–æ—è—Å–Ω–µ–Ω–æ –ø—Ä–∏—á–∏–Ω–∏ —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤")
    
    return G, dfs_path, bfs_path

if __name__ == "__main__":
    graph, dfs_result, bfs_result = main()
