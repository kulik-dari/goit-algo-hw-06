"""
–ó–∞–≤–¥–∞–Ω–Ω—è 3: –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤

–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞–≥ –¥–æ —Ä–µ–±–µ—Ä –≥—Ä–∞—Ñ–∞ —Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏
–¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ –º—ñ–∂ –≤—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω.
"""

import networkx as nx
import matplotlib.pyplot as plt
import heapq
import numpy as np
import pandas as pd
from collections import defaultdict
import time

def load_and_prepare_weighted_graph():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≥—Ä–∞—Ñ —Ç–∞ –¥–æ–¥–∞—î/–æ–Ω–æ–≤–ª—é—î –≤–∞–≥–∏ —Ä–µ–±–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —Ç–∞ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É.
    
    Returns:
        nx.Graph: –ì—Ä–∞—Ñ –∑ –≤–∞–≥–∞–º–∏
    """
    try:
        G = nx.read_gml("city_transport_network.gml")
        print("‚úÖ –ì—Ä–∞—Ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É")
    except FileNotFoundError:
        print("‚ö†Ô∏è  –§–∞–π–ª –≥—Ä–∞—Ñ–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π...")
        G = create_city_transport_network()
        nx.write_gml(G, "city_transport_network.gml")
    
    # –î–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –≤–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —Ç–∞ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    for edge in G.edges():
        if 'distance' in G.edges[edge]:
            distance = G.edges[edge]['distance']
            transport_type = G.edges[edge].get('transport_type', 'bus')
            
            # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É (—á–∞—Å –ø–æ–¥–æ—Ä–æ–∂—ñ)
            transport_coefficients = {
                'metro': 1.0,    # –ù–∞–π—à–≤–∏–¥—à–∏–π
                'train': 1.2,    # –¢—Ä–æ—Ö–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ —á–µ—Ä–µ–∑ –∑—É–ø–∏–Ω–∫–∏
                'bus': 1.8       # –ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ —á–µ—Ä–µ–∑ —Ç—Ä–∞—Ñ—ñ–∫
            }
            
            # –û–±—á–∏—Å–ª—é—î–º–æ –≤–∞–≥—É —è–∫ —á–∞—Å –ø–æ–¥–æ—Ä–æ–∂—ñ
            coefficient = transport_coefficients.get(transport_type, 1.5)
            weight = distance * coefficient
            
            G.edges[edge]['weight'] = weight
            G.edges[edge]['travel_time'] = weight  # —á–∞—Å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö
        else:
            # –Ø–∫—â–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—É –≤–∞–≥—É
            G.edges[edge]['weight'] = 5.0
            G.edges[edge]['travel_time'] = 5.0
    
    return G

def create_city_transport_network():
    """
    –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ—ó –º–µ—Ä–µ–∂—ñ –º—ñ—Å—Ç–∞ (–∫–æ–ø—ñ—è –¥–ª—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ).
    """
    G = nx.Graph()
    
    stations = {
        '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞': {'district': '–¶–µ–Ω—Ç—Ä', 'type': 'metro', 'population': 50000},
        '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞': {'district': '–¶–µ–Ω—Ç—Ä', 'type': 'metro', 'population': 30000},
        '–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç': {'district': '–¶–µ–Ω—Ç—Ä', 'type': 'metro', 'population': 40000},
        '–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –≤–æ–∫–∑–∞–ª': {'district': '–ü—ñ–≤–Ω—ñ—á', 'type': 'train', 'population': 35000},
        '–û–∑–µ—Ä–Ω–∞': {'district': '–ü—ñ–≤–Ω—ñ—á', 'type': 'bus', 'population': 25000},
        '–õ—ñ—Å–æ–ø–∞—Ä–∫': {'district': '–ü—ñ–≤–Ω—ñ—á', 'type': 'bus', 'population': 15000},
        '–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞': {'district': '–°—Ö—ñ–¥', 'type': 'metro', 'population': 45000},
        '–ó–∞–≤–æ–¥—Å—å–∫–∞': {'district': '–°—Ö—ñ–¥', 'type': 'bus', 'population': 20000},
        '–ù–æ–≤–∞ –∑–∞–±—É–¥–æ–≤–∞': {'district': '–°—Ö—ñ–¥', 'type': 'bus', 'population': 30000},
        '–ê–µ—Ä–æ–ø–æ—Ä—Ç': {'district': '–ó–∞—Ö—ñ–¥', 'type': 'train', 'population': 25000},
        '–¢–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä': {'district': '–ó–∞—Ö—ñ–¥', 'type': 'metro', 'population': 40000},
        '–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å': {'district': '–ó–∞—Ö—ñ–¥', 'type': 'bus', 'population': 20000},
        '–†—ñ—á–∫–æ–≤–∏–π –ø–æ—Ä—Ç': {'district': '–ü—ñ–≤–¥–µ–Ω—å', 'type': 'train', 'population': 30000},
        '–†–∏–Ω–æ–∫': {'district': '–ü—ñ–≤–¥–µ–Ω—å', 'type': 'bus', 'population': 35000},
        '–ñ–∏—Ç–ª–æ–≤–∏–π –º–∞—Å–∏–≤': {'district': '–ü—ñ–≤–¥–µ–Ω—å', 'type': 'bus', 'population': 40000}
    }
    
    for station, attributes in stations.items():
        G.add_node(station, **attributes)
    
    connections = [
        ('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞', '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞', 'metro', 2.5),
        ('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞', '–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç', 'metro', 3.0),
        ('–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞', '–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç', 'bus', 1.8),
        ('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞', '–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –≤–æ–∫–∑–∞–ª', 'metro', 4.5),
        ('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞', '–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞', 'metro', 5.2),
        ('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞', '–¢–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä', 'metro', 6.0),
        ('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞', '–†—ñ—á–∫–æ–≤–∏–π –ø–æ—Ä—Ç', 'bus', 7.5),
        ('–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –≤–æ–∫–∑–∞–ª', '–û–∑–µ—Ä–Ω–∞', 'bus', 3.5),
        ('–û–∑–µ—Ä–Ω–∞', '–õ—ñ—Å–æ–ø–∞—Ä–∫', 'bus', 2.8),
        ('–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –≤–æ–∫–∑–∞–ª', '–õ—ñ—Å–æ–ø–∞—Ä–∫', 'train', 5.0),
        ('–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞', '–ó–∞–≤–æ–¥—Å—å–∫–∞', 'bus', 2.2),
        ('–ó–∞–≤–æ–¥—Å—å–∫–∞', '–ù–æ–≤–∞ –∑–∞–±—É–¥–æ–≤–∞', 'bus', 3.1),
        ('–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞', '–ù–æ–≤–∞ –∑–∞–±—É–¥–æ–≤–∞', 'metro', 4.0),
        ('–¢–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä', '–ê–µ—Ä–æ–ø–æ—Ä—Ç', 'train', 8.5),
        ('–¢–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å', 'bus', 2.7),
        ('–ê–µ—Ä–æ–ø–æ—Ä—Ç', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å', 'bus', 6.3),
        ('–†—ñ—á–∫–æ–≤–∏–π –ø–æ—Ä—Ç', '–†–∏–Ω–æ–∫', 'bus', 2.0),
        ('–†–∏–Ω–æ–∫', '–ñ–∏—Ç–ª–æ–≤–∏–π –º–∞—Å–∏–≤', 'bus', 2.5),
        ('–†—ñ—á–∫–æ–≤–∏–π –ø–æ—Ä—Ç', '–ñ–∏—Ç–ª–æ–≤–∏–π –º–∞—Å–∏–≤', 'train', 4.2),
        ('–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞', 'bus', 4.8),
        ('–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞', '–¢–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä', 'bus', 5.5),
        ('–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –≤–æ–∫–∑–∞–ª', '–ê–µ—Ä–æ–ø–æ—Ä—Ç', 'train', 12.0),
        ('–û–∑–µ—Ä–Ω–∞', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å', 'bus', 8.2),
        ('–ó–∞–≤–æ–¥—Å—å–∫–∞', '–†–∏–Ω–æ–∫', 'bus', 6.5),
        ('–ù–æ–≤–∞ –∑–∞–±—É–¥–æ–≤–∞', '–ñ–∏—Ç–ª–æ–≤–∏–π –º–∞—Å–∏–≤', 'bus', 5.8),
    ]
    
    for station1, station2, transport_type, distance in connections:
        G.add_edge(station1, station2, 
                  transport_type=transport_type, 
                  distance=distance,
                  weight=distance)
    
    return G

def dijkstra_algorithm(graph, start):
    """
    –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ –≤—ñ–¥ –∑–∞–¥–∞–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏.
    
    Args:
        graph (nx.Graph): –ó–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ
        start (str): –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        
    Returns:
        tuple: (–≤—ñ–¥—Å—Ç–∞–Ω—ñ, –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    distances = {node: float('infinity') for node in graph.nodes()}
    distances[start] = 0
    predecessors = {node: None for node in graph.nodes()}
    visited = set()
    
    # –ö—É–ø–∞ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏
    heap = [(0, start)]
    iterations = 0
    
    start_time = time.time()
    
    while heap:
        iterations += 1
        current_distance, current = heapq.heappop(heap)
        
        if current in visited:
            continue
        
        visited.add(current)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ—Ö —Å—É—Å—ñ–¥—ñ–≤
        for neighbor in graph.neighbors(current):
            if neighbor not in visited:
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∞–≥—É —Ä–µ–±—Ä–∞
                edge_weight = graph.edges[current, neighbor]['weight']
                new_distance = current_distance + edge_weight
                
                # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö
                if new_distance < distances[neighbor]:
                    distances[neighbor] = new_distance
                    predecessors[neighbor] = current
                    heapq.heappush(heap, (new_distance, neighbor))
    
    end_time = time.time()
    
    stats = {
        'iterations': iterations,
        'execution_time': end_time - start_time,
        'nodes_processed': len(visited),
        'reachable_nodes': sum(1 for d in distances.values() if d != float('infinity'))
    }
    
    return distances, predecessors, stats

def reconstruct_path(predecessors, start, end):
    """
    –í—ñ–¥–Ω–æ–≤–ª—é—î —à–ª—è—Ö –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–æ –∫—ñ–Ω—Ü–µ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏.
    
    Args:
        predecessors (dict): –°–ª–æ–≤–Ω–∏–∫ –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤
        start (str): –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        end (str): –ö—ñ–Ω—Ü–µ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        
    Returns:
        list: –®–ª—è—Ö –≤—ñ–¥ start –¥–æ end
    """
    path = []
    current = end
    
    while current is not None:
        path.append(current)
        current = predecessors[current]
    
    path.reverse()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥—ñ–π—Å–Ω–æ –∑–Ω–∞–π–¥–µ–Ω–æ —à–ª—è—Ö
    if path[0] != start:
        return None
    
    return path

def find_all_shortest_paths(graph):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –º—ñ–∂ –≤—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω.
    
    Args:
        graph (nx.Graph): –ó–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ
        
    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–∞—Ä –≤–µ—Ä—à–∏–Ω
    """
    all_paths = {}
    all_distances = {}
    nodes = list(graph.nodes())
    total_pairs = len(nodes) * (len(nodes) - 1)
    
    print(f"üîÑ –û–±—á–∏—Å–ª—é—î–º–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –¥–ª—è {total_pairs} –ø–∞—Ä –≤–µ—Ä—à–∏–Ω...")
    
    for i, start in enumerate(nodes):
        print(f"   –û–±—Ä–æ–±–∫–∞ –≤–µ—Ä—à–∏–Ω–∏ {i+1}/{len(nodes)}: {start}")
        
        distances, predecessors, _ = dijkstra_algorithm(graph, start)
        
        for end in nodes:
            if start != end and distances[end] != float('infinity'):
                path = reconstruct_path(predecessors, start, end)
                if path:
                    all_paths[(start, end)] = path
                    all_distances[(start, end)] = distances[end]
    
    return all_paths, all_distances

def visualize_shortest_path(graph, start, end, path, distances):
    """
    –í—ñ–∑—É–∞–ª—ñ–∑—É—î –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –º—ñ–∂ –¥–≤–æ–º–∞ –≤–µ—Ä—à–∏–Ω–∞–º–∏.
    """
    plt.figure(figsize=(14, 10))
    
    pos = nx.spring_layout(graph, k=3, iterations=50, seed=42)
    
    # –ö–æ–ª—å–æ—Ä–∏ –≤–µ—Ä—à–∏–Ω –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ç–æ—á–∫–∏
    node_colors = []
    max_distance = max(d for d in distances.values() if d != float('infinity'))
    
    for node in graph.nodes():
        if node == start:
            node_colors.append('#FF4444')  # –ß–µ—Ä–≤–æ–Ω–∏–π –¥–ª—è –ø–æ—á–∞—Ç–∫—É
        elif node == end:
            node_colors.append('#44FF44')  # –ó–µ–ª–µ–Ω–∏–π –¥–ª—è –∫—ñ–Ω—Ü—è
        elif path and node in path:
            node_colors.append('#4444FF')  # –°–∏–Ω—ñ–π –¥–ª—è —à–ª—è—Ö—É
        else:
            # –ì—Ä–∞–¥—ñ—î–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
            if distances[node] == float('infinity'):
                node_colors.append('#CCCCCC')  # –°—ñ—Ä–∏–π –¥–ª—è –Ω–µ–¥–æ—Å—è–∂–Ω–∏—Ö
            else:
                intensity = 1 - (distances[node] / max_distance)
                node_colors.append(plt.cm.YlOrRd(intensity))
    
    # –ú–∞–ª—é—î–º–æ –≤—Å—ñ —Ä–µ–±—Ä–∞
    nx.draw_networkx_edges(graph, pos, edge_color='lightgray', width=1, alpha=0.3)
    
    # –í–∏–¥—ñ–ª—è—î–º–æ —Ä–µ–±—Ä–∞ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É
    if path and len(path) > 1:
        path_edges = [(path[i], path[i+1]) for i in range(len(path)-1)]
        
        # –†—ñ–∑–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –≤ —à–ª—è—Ö—É
        for edge in path_edges:
            transport_type = graph.edges[edge]['transport_type']
            if transport_type == 'metro':
                color = '#2C3E50'
                width = 4
            elif transport_type == 'train':
                color = '#8E44AD'
                width = 3.5
            else:  # bus
                color = '#E67E22'
                width = 3
            
            nx.draw_networkx_edges(graph, pos, edgelist=[edge],
                                 edge_color=color, width=width, alpha=0.9)
    
    # –ú–∞–ª—é—î–º–æ –≤–µ—Ä—à–∏–Ω–∏
    nx.draw_networkx_nodes(graph, pos,
                         node_color=node_colors,
                         node_size=600,
                         alpha=0.8,
                         edgecolors='black',
                         linewidths=1.5)
    
    # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∏ –∑ –≤—ñ–¥—Å—Ç–∞–Ω—è–º–∏
    labels = {}
    for node in graph.nodes():
        if distances[node] == float('infinity'):
            labels[node] = f"{node[:8]}...\n‚àû"
        else:
            labels[node] = f"{node[:8]}...\n{distances[node]:.1f}"
    
    nx.draw_networkx_labels(graph, pos, labels,
                          font_size=7,
                          font_weight='bold')
    
    # –î–æ–¥–∞—î–º–æ –≤–∞–≥–∏ —Ä–µ–±–µ—Ä –¥–ª—è —à–ª—è—Ö—É
    if path and len(path) > 1:
        edge_labels = {}
        for i in range(len(path)-1):
            edge = (path[i], path[i+1])
            weight = graph.edges[edge]['weight']
            edge_labels[edge] = f"{weight:.1f}"
        
        nx.draw_networkx_edge_labels(graph, pos, edge_labels,
                                   font_size=8, font_color='red')
    
    total_distance = distances[end] if distances[end] != float('infinity') else "‚àû"
    plt.title(f'–ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤—ñ–¥ "{start}" –¥–æ "{end}"\n'
              f'–ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å: {total_distance}\n'
              f'–®–ª—è—Ö: {" ‚Üí ".join(path) if path else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}',
              fontsize=12, fontweight='bold')
    
    # –õ–µ–≥–µ–Ω–¥–∞
    legend_elements = [
        plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='#FF4444', 
                  markersize=10, label='–ü–æ—á–∞—Ç–æ–∫'),
        plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='#44FF44', 
                  markersize=10, label='–ö—ñ–Ω–µ—Ü—å'),
        plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='#4444FF', 
                  markersize=10, label='–®–ª—è—Ö'),
        plt.Line2D([0], [0], color='#2C3E50', linewidth=4, label='–ú–µ—Ç—Ä–æ'),
        plt.Line2D([0], [0], color='#8E44AD', linewidth=3.5, label='–ü–æ—ó–∑–¥'),
        plt.Line2D([0], [0], color='#E67E22', linewidth=3, label='–ê–≤—Ç–æ–±—É—Å')
    ]
    plt.legend(handles=legend_elements, loc='upper left')
    
    plt.axis('off')
    plt.tight_layout()
    plt.show()

def create_distance_matrix(graph, all_distances):
    """
    –°—Ç–≤–æ—Ä—é—î –º–∞—Ç—Ä–∏—Ü—é –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –º—ñ–∂ –≤—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω.
    
    Args:
        graph (nx.Graph): –ì—Ä–∞—Ñ
        all_distances (dict): –í—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ –≤—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏
        
    Returns:
        pd.DataFrame: –ú–∞—Ç—Ä–∏—Ü—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π
    """
    nodes = list(graph.nodes())
    matrix = np.full((len(nodes), len(nodes)), np.inf)
    
    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –º–∞—Ç—Ä–∏—Ü—é
    for i, start in enumerate(nodes):
        matrix[i, i] = 0  # –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Å–∞–º–æ–≥–æ —Å–µ–±–µ = 0
        for j, end in enumerate(nodes):
            if (start, end) in all_distances:
                matrix[i, j] = all_distances[(start, end)]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    df = pd.DataFrame(matrix, index=nodes, columns=nodes)
    return df

def analyze_shortest_paths(graph, all_paths, all_distances):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤.
    
    Args:
        graph (nx.Graph): –ì—Ä–∞—Ñ
        all_paths (dict): –í—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ —à–ª—è—Ö–∏
        all_distances (dict): –í—Å—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
    """
    print("\n" + "="*80)
    print("üìä –ê–ù–ê–õ–Ü–ó –ù–ê–ô–ö–û–†–û–¢–®–ò–• –®–õ–Ø–•–Ü–í (–ê–õ–ì–û–†–ò–¢–ú –î–ï–ô–ö–°–¢–†–ò)")
    print("="*80)
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_possible_paths = len(graph.nodes()) * (len(graph.nodes()) - 1)
    found_paths = len(all_paths)
    
    print(f"\nüìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–∂–ª–∏–≤–∏—Ö —à–ª—è—Ö—ñ–≤: {total_possible_paths}")
    print(f"   ‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ —à–ª—è—Ö—ñ–≤: {found_paths}")
    print(f"   ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ—Å—è–∂–Ω–æ—Å—Ç—ñ: {(found_paths/total_possible_paths)*100:.1f}%")
    
    # –ê–Ω–∞–ª—ñ–∑ –¥–æ–≤–∂–∏–Ω —à–ª—è—Ö—ñ–≤
    if all_distances:
        distances_list = list(all_distances.values())
        avg_distance = np.mean(distances_list)
        min_distance = min(distances_list)
        max_distance = max(distances_list)
        
        print(f"\nüìè –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π:")
        print(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—å: {avg_distance:.2f}")
        print(f"   ‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å: {min_distance:.2f}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å: {max_distance:.2f}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–∞ –Ω–∞–π–¥–æ–≤—à–∏–π —à–ª—è—Ö–∏
        min_path = min(all_distances.keys(), key=lambda x: all_distances[x])
        max_path = max(all_distances.keys(), key=lambda x: all_distances[x])
        
        print(f"   ‚Ä¢ –ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö: {min_path[0]} ‚Üí {min_path[1]} ({min_distance:.2f})")
        print(f"   ‚Ä¢ –ù–∞–π–¥–æ–≤—à–∏–π —à–ª—è—Ö: {max_path[0]} ‚Üí {max_path[1]} ({max_distance:.2f})")
    
    # –ê–Ω–∞–ª—ñ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—ñ —Å—Ç–∞–Ω—Ü—ñ–π
    print(f"\nüéØ –ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å—Ç–∞–Ω—Ü—ñ–π:")
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —à–ª—è—Ö—ñ–≤ –≤—ñ–¥ –∫–æ–∂–Ω–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó
    outgoing_paths = defaultdict(int)
    incoming_paths = defaultdict(int)
    avg_outgoing_distance = defaultdict(list)
    
    for (start, end), distance in all_distances.items():
        outgoing_paths[start] += 1
        incoming_paths[end] += 1
        avg_outgoing_distance[start].append(distance)
    
    # –¢–æ–ø-5 –Ω–∞–π–±—ñ–ª—å—à –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π (–∑ —è–∫–∏—Ö –º–æ–∂–Ω–∞ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–æ –±–∞–≥–∞—Ç—å–æ—Ö –º—ñ—Å—Ü—å)
    top_accessible = sorted(outgoing_paths.items(), key=lambda x: x[1], reverse=True)[:5]
    print(f"   ‚Ä¢ –¢–æ–ø-5 —Å—Ç–∞–Ω—Ü—ñ–π –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—é:")
    for i, (station, count) in enumerate(top_accessible, 1):
        avg_dist = np.mean(avg_outgoing_distance[station]) if avg_outgoing_distance[station] else 0
        print(f"     {i}. {station}: {count} –Ω–∞–ø—Ä—è–º–∫—ñ–≤, —Å–µ—Ä–µ–¥–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—å {avg_dist:.2f}")
    
    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ñ —Å—Ç–∞–Ω—Ü—ñ—ó (–¥–æ —è–∫–∏—Ö –ª–µ–≥–∫–æ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è)
    top_central = sorted(incoming_paths.items(), key=lambda x: x[1], reverse=True)[:5]
    print(f"   ‚Ä¢ –¢–æ–ø-5 –Ω–∞–π–±—ñ–ª—å—à —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π:")
    for i, (station, count) in enumerate(top_central, 1):
        print(f"     {i}. {station}: {count} —à–ª—è—Ö—ñ–≤ –≤–µ–¥—É—Ç—å —Å—é–¥–∏")

def compare_with_networkx(graph, start, end):
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î –Ω–∞—à—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏ –∑ –≤–±—É–¥–æ–≤–∞–Ω–æ—é –≤ NetworkX.
    
    Args:
        graph (nx.Graph): –ì—Ä–∞—Ñ
        start (str): –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        end (str): –ö—ñ–Ω—Ü–µ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
    """
    print(f"\nüî¨ –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ó NETWORKX")
    print("="*50)
    
    # –ù–∞—à–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
    start_time = time.time()
    distances, predecessors, stats = dijkstra_algorithm(graph, start)
    our_path = reconstruct_path(predecessors, start, end)
    our_time = time.time() - start_time
    our_distance = distances[end] if distances[end] != float('infinity') else None
    
    # NetworkX —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
    start_time = time.time()
    try:
        nx_path = nx.shortest_path(graph, start, end, weight='weight')
        nx_distance = nx.shortest_path_length(graph, start, end, weight='weight')
        nx_time = time.time() - start_time
    except nx.NetworkXNoPath:
        nx_path = None
        nx_distance = None
        nx_time = time.time() - start_time
    
    print(f"–ú–∞—Ä—à—Ä—É—Ç: {start} ‚Üí {end}")
    print(f"\n{'–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è':<15} {'–í—ñ–¥—Å—Ç–∞–Ω—å':<12} {'–ß–∞—Å (–º—Å)':<10} {'–®–ª—è—Ö'}")
    print("-" * 70)
    print(f"{'–ù–∞—à–∞':<15} {our_distance if our_distance else '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ':<12} {our_time*1000:.3f} "
          f"{' ‚Üí '.join(our_path) if our_path else '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}")
    print(f"{'NetworkX':<15} {nx_distance if nx_distance else '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ':<12} {nx_time*1000:.3f} "
          f"{' ‚Üí '.join(nx_path) if nx_path else '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ
    if our_distance is not None and nx_distance is not None:
        if abs(our_distance - nx_distance) < 0.001:
            print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å - —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞!")
        else:
            print(f"\n‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å! –†—ñ–∑–Ω–∏—Ü—è: {abs(our_distance - nx_distance):.3f}")
    elif our_distance is None and nx_distance is None:
        print("\n‚úÖ –û–±–∏–¥–≤—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π—à–ª–∏ —à–ª—è—Ö - –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è 3.
    """
    print("‚ö° –ó–∞–≤–¥–∞–Ω–Ω—è 3: –ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤")
    print("="*70)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª—é—î–º–æ –≥—Ä–∞—Ñ
    print("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–≤–∞–∂–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞...")
    G = load_and_prepare_weighted_graph()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ
    start_station = '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞'
    end_station = '–ê–µ—Ä–æ–ø–æ—Ä—Ç'
    
    print(f"\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏:")
    print(f"–ü–æ—à—É–∫ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É: {start_station} ‚Üí {end_station}")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏
    distances, predecessors, stats = dijkstra_algorithm(G, start_station)
    path = reconstruct_path(predecessors, start_station, end_station)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    if path:
        print(f"   ‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–∏–π —à–ª—è—Ö: {' ‚Üí '.join(path)}")
        print(f"   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å: {distances[end_station]:.2f}")
        print(f"   ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞–Ω—Ü—ñ–π: {len(path)}")
    else:
        print(f"   ‚Ä¢ –®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    print(f"   ‚Ä¢ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {stats['execution_time']*1000:.3f} –º—Å")
    print(f"   ‚Ä¢ –Ü—Ç–µ—Ä–∞—Ü—ñ–π: {stats['iterations']}")
    print(f"   ‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ –≤—É–∑–ª—ñ–≤: {stats['nodes_processed']}")
    
    # –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìà –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É...")
    visualize_shortest_path(G, start_station, end_station, path, distances)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏
    print(f"\nüîÑ –ü–æ—à—É–∫ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ –º—ñ–∂ –≤—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏ —Å—Ç–∞–Ω—Ü—ñ–π...")
    all_paths, all_distances = find_all_shortest_paths(G)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Ç—Ä–∏—Ü—é –≤—ñ–¥—Å—Ç–∞–Ω–µ–π
    print(f"\nüìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π...")
    distance_matrix = create_distance_matrix(G, all_distances)
    
    # –í–∏–≤–æ–¥–∏–º–æ —á–∞—Å—Ç–∏–Ω—É –º–∞—Ç—Ä–∏—Ü—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    print(f"\n–ú–∞—Ç—Ä–∏—Ü—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π (–ø–µ—Ä—à—ñ 5x5 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤):")
    print(distance_matrix.iloc[:5, :5].round(2))
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    analyze_shortest_paths(G, all_paths, all_distances)
    
    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ NetworkX
    compare_with_networkx(G, start_station, end_station)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print(f"\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...")
    distance_matrix.to_csv('distance_matrix.csv')
    print(f"   ‚Ä¢ –ú–∞—Ç—Ä–∏—Ü—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ 'distance_matrix.csv'")
    
    print(f"\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 3 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìã –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏")
    print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –º—ñ–∂ –≤—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω")
    print(f"üìà –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤")
    print(f"üî¨ –ü–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é NetworkX")
    
    return G, all_paths, all_distances, distance_matrix

if __name__ == "__main__":
    graph, paths, distances, matrix = main()
